<h3>TipologiaDocumenti</h3>
@page "/TipologiaDocumenti"
@using HumanResourcesManagementAPI.Models
@inject HttpClient HttpClient
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject IJSRuntime JS


<button type="button" class="btn btn-primary" @onclick="ApriFinestraModale">Aggiungi TipologiaDocumenti </button>
@if (mostraFinestraModale)
{
    <div class="modal show" tabindex="-1" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Dati TipologiaDocumenti</h1>
                    <button type="button" class="btn-close" @onclick="ChiudiFinestraModale" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form @onsubmit="AggiungiTipologiaDocumenti">
                        Descrizione <input type="text" class="form-control" @bind="nuovaTipologiaDocumento.Descrizione" required /><br />
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="ChiudiFinestraModale">Chiudi</button>
                            <input type="reset" class="btn btn-secondary" value="Cancella" />
                            <button type="submit" class="btn btn-primary">Salva</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}
<table>
    <tr>
        <th>Descrizione</th>
        <th>Modifica</th>
        <th>Elimina</th>
    </tr>
</table>


@if (mostraMessaggio)
{
    <div class="modal show" tabindex="-1" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="messaggioTitle">Successo</h1>
                    <button type="button" class="btn-close" @onclick="ChiudiMessaggio" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>La tipologia documento è stata aggiunta con successo!</p>
                </div>
            </div>
        </div>
    </div>
}

    @if (listaTipologiaDocumenti != null)

    @foreach (var tipologiadocumenti in listaTipologiaDocumenti)
    {
            <tr>
            <td>@tipologiadocumenti.Descrizione</td>
            <td> <button class="btn btn-primary" @onclick="() => ModificaTipologiaDocumenti(tipologiadocumenti)">Modifica</button></td>
            <td> <button class="btn btn-danger" @onclick="() => EliminaTipologiaDocumento(tipologiadocumenti)">Elimina</button></td>
            </tr>
    }

    @if (tipologiadocumentiDaModificare != null)
    {
        <div class="modal show" tabindex="-1" style="display: block; background: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="modificatipologiaDocumenti">Modifica tipologiaDocumenti</h1>
                        <button type="button" class="btn-close" aria-label="Close" @onclick="ChiudiFinestraModale"></button>
                    </div>
                <div class="modal-body">
                    <form @onsubmit="AggiungiTipologiaDocumenti">
                        Descrizione <input type="text" class="form-control" @bind="nuovaTipologiaDocumento.Descrizione" required /><br />
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="ChiudiFinestraModale">Chiudi</button>
                            <input type="reset" class="btn btn-secondary" value="Cancella" />
                            <button type="submit" class="btn btn-primary">Salva</button>
                        </div>
                    </form>
                </div>
                </div>
            </div>
        </div>
    }
    @if (tipologiadocumentiDaEliminare != null)
{
        <div class="modal show" tabindex="-1" style="display: block; background: rgba(0, 0, 0, 0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="confermaEliminazioneTitle">Conferma Eliminazione</h1>
                        <button type="button" class="btn-close" @onclick="AnnullaEliminazione" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Sei sicuro di voler eliminare questo documento?</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" @onclick="AnnullaEliminazione">Annulla</button>
                        <button class="btn btn-danger" @onclick="ConfermaEliminazione">Elimina</button>
                    </div>
                </div>
            </div>
        </div>
}


@code
{
    private bool mostraFinestraModale = false;
    private bool mostraMessaggio = false;
    private bool mostraMessaggioModifica = false;

    private List<TipologiaDocumento>? listaTipologiaDocumenti;
    private TipologiaDocumento nuovaTipologiaDocumento = new TipologiaDocumento();
    private TipologiaDocumento? tipologiadocumentiDaModificare = null;
    private TipologiaDocumento? tipologiadocumentiDaEliminare = null;

    private void ModificaTipologiaDocumenti(TipologiaDocumento tipologiadocumenti)
    {
        tipologiadocumentiDaModificare = tipologiadocumenti;
    }

    private async Task SalvaModifiche()
    {
        if (tipologiadocumentiDaModificare != null)
        {
            var response = await HttpClient.PutAsJsonAsync("api/TipologiaDocumento", tipologiadocumentiDaModificare);

            if (response.IsSuccessStatusCode)
            {
                tipologiadocumentiDaModificare = null;
                await GetAll();
            }
            else
            {
                Console.WriteLine("Errore durante la modifica del documento.");
            }
        }
    }

    private void EliminaTipologiaDocumento(TipologiaDocumento tipologiaDocumento)
    {
        tipologiadocumentiDaEliminare = tipologiaDocumento;
    }

    private void AnnullaEliminazione()
    {
        tipologiadocumentiDaEliminare = null;
    }

    private async Task ConfermaEliminazione()
    {
        if (tipologiadocumentiDaEliminare != null)
        {
            var response = await HttpClient.DeleteAsync($"api/TipologiaDocumento/{tipologiadocumentiDaEliminare.Id}");

            if (response.IsSuccessStatusCode)
            {
                tipologiadocumentiDaEliminare = null;
                await GetAll();
            }
            else
            {
                Console.WriteLine("Errore durante l'eliminazione del documento.");
            }
        }
    }

    private void ApriFinestraModale()
    {
        mostraFinestraModale = true;
    }

    private void ChiudiFinestraModale()
    {
        mostraFinestraModale = false;
    }

    private void ChiudiFinestraModifica()
    {
        tipologiadocumentiDaModificare = null;
    }

    private void ChiudiMessaggio()
    {
        mostraMessaggio = false;
    }

    protected override async Task OnInitializedAsync()
    {

        await GetAll();
    }

    private async Task GetAll()
    {
        try
        {
            listaTipologiaDocumenti = await HttpClient.GetFromJsonAsync<List<TipologiaDocumento>>("api/TipologiaDocumento");
        }
        catch (HttpRequestException)
        {
            return;
        }

    }

    private async Task AggiungiTipologiaDocumenti()
    {
        if (IsValid(nuovaTipologiaDocumento))
        {
            var response = await HttpClient.PostAsJsonAsync("api/TipologiaDocumento", nuovaTipologiaDocumento);

            if (response.IsSuccessStatusCode)
            {
                var tipologiadocumentiCreato = await response.Content.ReadFromJsonAsync<TipologiaDocumento>();
                if (listaTipologiaDocumenti != null && tipologiadocumentiCreato != null)
                {
                    listaTipologiaDocumenti.Add(tipologiadocumentiCreato);
                    nuovaTipologiaDocumento = new TipologiaDocumento();
                    mostraFinestraModale = false;
                    mostraMessaggio = true;
                }
            }
            else
            {
                Console.WriteLine("Errore durante l'aggiunta della tipologia documento.");
            }
        }
    }

    private bool IsValid(TipologiaDocumento tipologiaDocumenti)
    {
        return !string.IsNullOrWhiteSpace(tipologiaDocumenti.Descrizione);
    }
}



