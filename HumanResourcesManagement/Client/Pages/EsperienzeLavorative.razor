@using HumanResourcesManagementAPI.Models
@inject HttpClient HttpClient
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@page "/EsperienzeLavorative"


<h3>EsperienzeLavorative</h3>

<button type="button" class="btn btn-primary" @onclick="ApriFinestraModale">Aggiungi Esperienze lavorative</button>
@if (mostraFinestraModale)
{
    <div class="modal show" tabindex="-1" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Esperienze Lavorative</h1>
                    <button type="button" class="btn-close" @onclick="ChiudiFinestraModale" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form @onsubmit="Aggiungi esperienze lavorative">
                        Data inizio <input type="text" class="form-control" @bind="nuovaEsperienzaLavorativa.DataInizio" required /><br />
                        Data fine <input type="text" class="form-control" @bind="nuovaEsperienzaLavorativa.DataFine" required /><br />
                        Azienda <input type="text" class="form-control" @bind="nuovaEsperienzaLavorativa.Azienda" required /><br />
                        Descrizione <input type="date" class="form-control" @bind="nuovaEsperienzaLavorativa.Descrizione" required /><br />

                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="ChiudiFinestraModale">Chiudi</button>
                            <input type="reset" class="btn btn-secondary" value="Cancella" />
                            <button type="submit" class="btn btn-primary">Salva</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@if (mostraMessaggio)
{
    <div class="modal show" tabindex="-1" style="display: block; background: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="messaggioTitle">Successo</h1>
                    <button type="button" class="btn-close" @onclick="ChiudiMessaggio" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>L'esperienza lavorativa è stata aggiunta con successo!</p>
                </div>
            </div>
        </div>
    </div>
}

<table>
    <tr>
        <th>Data Inizio</th>
        <th>Data Fine</th>
        <th>Azienda</th>
        <th>Descrizione</th>
    </tr>

@if (listaEsperienzeLavorative != null)
    {

        @foreach (var esperienzalavorativa in listaEsperienzeLavorative)
        {
            <tr>
                <td>@esperienzalavorativa.DataInizio</td>
                <td>@esperienzalavorativa.DataFine</td>
                <td>@esperienzalavorativa.Azienda</td>
                <td>@esperienzalavorativa.Descrizione</td>
            </tr>
        }
    }
</table>

@code 
{
    private bool chiusurafinestra = false;
    private bool mostraFinestraModale = false;
    private bool mostraMessaggio = false;
    private EsperienzeLavorative nuovaEsperienzeLavorativa = new EsperienzeLavorative();
    private List<EsperienzeLavorative>? listaEsperienzeLavorative;

    private void ApriFinestraModale()
    {
        mostraFinestraModale = true;
    }

    private void ChiudiFinestraModale()
    {
        mostraFinestraModale = false;
    }

    private void ChiudiMessaggio()
    {
        mostraMessaggio = false;
    }

    protected override async Task OnInitializedAsync()
    {

        await GetAll();
    }

    private async Task GetAll()
    {
        try
        {
            listaEsperienzeLavorative = await HttpClient.GetFromJsonAsync<List<EsperienzeLavorative>("api/EsperienzeLavorative");
        }
        catch (HttpRequestException)
        {
            return;
        }

    }

    private async Task AggiungiEsperienzeLavorativa()
    {
        if (IsValid(nuovaEsperienzeLavorativa))
        {
            var response = await HttpClient.PostAsJsonAsync("api/EsperienzeLavorativa", nuovaEsperienzeLavorativa);

            if (response.IsSuccessStatusCode)
            {
                var esperienzelavorativeCreato = await response.Content.ReadFromJsonAsync<EsperienzeLavorative>();
                if (listaEsperienzeLavorative != null && esperienzelavorativeCreato != null)
                {
                    listaEsperienzeLavorative.Add(esperienzelavorativeCreato);
                    nuovaEsperienzeLavorativa = new EsperienzeLavorative();
                    mostraFinestraModale = false;
                    mostraMessaggio = true;
                }
            }

            else
            {
                Console.WriteLine("Errore durante l'aggiunta dell'esperienza lavorativa.");
            }
        }
    }

    private bool IsValid(EsperienzeLavorative esperienzelavorative)
    {
        return !string.IsNullOrWhiteSpace(esperienzelavorative.DataInizio)
            && !string.IsNullOrWhiteSpace(esperienzelavorative.DataFine)
            && !string.IsNullOrWhiteSpace(esperienzelavorative.Azienda)
            && !string.IsNullOrWhiteSpace(esperienzelavorative.Descrizione);
    }
}